package telebot

import (
	"fmt"

	tele "gopkg.in/telebot.v3"
)

// Messages displayed to the user.
var (
	startMessage                  = "‚õΩÔ∏è –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∑–∞–ø—Ä–∞–≤–∫—É, —á—Ç–æ–±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥—å!"
	errorMessage                  = "üò¨ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
	unknownCommandMessage         = "‚õîÔ∏è –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"
	chooseFuelPumpMessage         = "üöò –í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∫–æ–ª–æ–Ω–∫—É!"
	fuelPumpIsNotAvailableMessage = "üö´ –ö–æ–ª–æ–Ω–∫–∞ –∑–∞–Ω—è—Ç–∞! –ú—ã —É–≤–µ–¥–æ–≤–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –æ–Ω–∞ –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è!"
	choosePaymentMethodMessage    = "üí∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ—Ç–ø–ª–∞—Ç—ã!"

	enterCardNumberMessage  = "üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –Ω–∞ –µ–µ –ª–∏—Ü–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω–µ –∏ –æ–±—ã—á–Ω–æ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 16 —Ü–∏—Ñ—Ä."
	enterCardExpDateMessage = "‚åõÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã, –¥–∞—Ç–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã."
	enterCardHolderMessage  = "ü§µ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –¥–µ—Ä–∂–∞—Ç–µ–ª—è –∫–∞—Ä—Ç—ã, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–æ –Ω–∞ –ª–∏—Ü–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω–µ –∫–∞—Ä—Ç—ã."
	enterCardCVVMessage     = "ü§´ –í–≤–µ–¥–∏—Ç–µ —Ç—Ä—ë—Ö–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã–π –Ω–∞ –∑–∞–¥–Ω–µ–π —á–∞—Å—Ç–∏ –∫–∞—Ä—Ç—ã."
)

// getPaymentMarkup returns a markup for selecting payment methods.
func (b *Bot) getPaymentMarkup() *tele.ReplyMarkup {
	markup := &tele.ReplyMarkup{}

	rows := []tele.Row{
		markup.Row(markup.Text("üíµ –ù–∞–ª–∏—á–Ω—ã–π —Ä–∞—Å—Å—á–µ—Ç")),
		markup.Row(markup.Text("üí≥ –ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π —Ä–∞—Å—Å—á–µ—Ç")),
		markup.Row(markup.Text("‚õîÔ∏è –û—Ç–º–µ–Ω–∞!")),
	}

	markup.Reply(rows...)

	return markup
}

// getFuelPumpsMarkup returns a markup for available fuel pumps at a station.
func (b *Bot) getFuelPumpsMarkup(stationID uint64) (*tele.ReplyMarkup, error) {
	pumps, err := b.repo.FuelPumpRepository.GetAll(stationID)
	if err != nil {
		return nil, err
	}

	markup := &tele.ReplyMarkup{}
	rows := make([]tele.Row, len(pumps)+1)

	for idx, pump := range pumps {
		availability := "‚úÖ"
		if !pump.IsAvailable {
			availability = "‚ùå"
		}

		text := fmt.Sprintf("%d | üõ¢ %s - %d‚Ç∏ %s", pump.ID, pump.FuelType, pump.Price, availability)
		rows[idx] = markup.Row(markup.Text(text))
	}

	rows[len(pumps)] = markup.Row(markup.Text("‚õîÔ∏è –û—Ç–º–µ–Ω–∞!"))

	markup.Reply(rows...)

	return markup, nil
}

// getStationsMarkup returns a markup for selecting gas stations.
func (b *Bot) getStationsMarkup() (*tele.ReplyMarkup, error) {
	stations, err := b.repo.GasStationRepository.GetAll()
	if err != nil {
		return nil, err
	}

	markup := &tele.ReplyMarkup{}
	rows := make([]tele.Row, len(stations)+1)

	for idx, station := range stations {
		text := fmt.Sprintf("%d | ‚õΩÔ∏è %s (%s)", station.ID, station.Company, station.Address)
		rows[idx] = markup.Row(markup.Text(text))
	}

	rows[len(stations)] = markup.Row(markup.Text("üíº –ü—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞—Ä—Ç—É."))

	markup.Reply(rows...)

	return markup, nil
}
